name: CI
on:
  push:
    branches:
      - master
jobs:
  test:
    runs-on: ubuntu-latest
    env:
      RUST_LOG: info
    steps:
      - uses: actions/checkout@v4
      - name: Run Tests
        run: make build


  binaries:
    strategy:
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            name: aiutante-linux-x86_64
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-latest
            name: aiutante-linux-aarch64
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            name: aiutante-windows-x86_64.exe
          - target: x86_64-apple-darwin
            os: macos-latest
            name: aiutante-macos-x86_64
          - target: aarch64-apple-darwin
            os: macos-latest
            name: aiutante-macos-aarch64
    runs-on: ${{ matrix.os }}
    env:
      RUST_LOG: info
    steps:
      - uses: actions/checkout@v4

      - name: Install dependencies (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y pkg-config libssl-dev
          
      - name: Install cross-compilation tools (Linux ARM64)
        if: matrix.os == 'ubuntu-latest' && matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          sudo apt-get install -y gcc-aarch64-linux-gnu libssl-dev:arm64
          echo "CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
          echo "PKG_CONFIG_ALLOW_CROSS=1" >> $GITHUB_ENV
          echo "OPENSSL_DIR=/usr/lib/aarch64-linux-gnu" >> $GITHUB_ENV

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Build binary
        run: cargo build --release --target ${{ matrix.target }}

      - name: Rename binary (Unix)
        if: matrix.os != 'windows-latest'
        run: mv target/${{ matrix.target }}/release/aiutante ${{ matrix.name }}

      - name: Rename binary (Windows)
        if: matrix.os == 'windows-latest'
        run: mv target/${{ matrix.target }}/release/aiutante.exe ${{ matrix.name }}

      - name: Upload binary
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.name }}
          path: ${{ matrix.name }}

  release:
    needs: [test, binaries]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master'
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts
      - name: Create release tag
        id: tag
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          cargo install cargo-version-upgrade
          cargo-version-upgrade minor
          echo "tag=$(git tag --sort=-creatordate | head)" >> $GITHUB_OUTPUT
          git push origin $TAG
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.tag.outputs.tag }}
          name: Release ${{ steps.tag.outputs.tag }}
          body: |
            Automated release built from commit ${{ github.sha }}

            ## Binaries
            - Linux x86_64: `aiutante-linux-x86_64`
            - Linux ARM64: `aiutante-linux-aarch64`
            - Windows x86_64: `aiutante-windows-x86_64.exe`
            - macOS x86_64: `aiutante-macos-x86_64`
            - macOS ARM64: `aiutante-macos-aarch64`
          files: |
            ./artifacts/*/aiutante-*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # - name: Log in to GitHub Container Registry
      #   uses: docker/login-action@v3
      #   with:
      #     registry: ghcr.io
      #     username: ${{ github.actor }}
      #     password: ${{ secrets.GITHUB_TOKEN }}

      # - name: Extract metadata
      #   id: meta
      #   uses: docker/metadata-action@v5
      #   with:
      #     images: ghcr.io/${{ github.repository }}
      #     tags: |
      #       type=ref,event=branch
      #       type=sha
      #       type=raw,value=latest,enable={{is_default_branch}}

      # - name: Docker Build and Push
      #   uses: docker/build-push-action@v5
      #   with:
      #     context: .
      #     push: true
      #     tags: ${{ steps.meta.outputs.tags }}
      #     labels: ${{ steps.meta.outputs.labels }}
